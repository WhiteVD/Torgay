// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Torgay.Core.Infrastructure;

#nullable disable

namespace Torgay.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251015193722_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Settings")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("Torgay.Core.Models.Account.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Torgay.Core.Models.Account.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Torgay.Core.Models.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Идентификатор");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasComment("Кем создано");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Когда создано");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasComment("Кем изменено");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Когда изменено");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_AccountType", t =>
                        {
                            t.HasComment("Тип счёта");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.BCC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Идентификатор");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasComment("Код");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_BCC", t =>
                        {
                            t.HasComment("Код бюджетной класификации");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("BIC")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasComment("Банковский идентификационный код");

                    b.Property<Guid?>("Country_id")
                        .HasColumnType("uuid")
                        .HasComment("Страна");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор источника");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_Banks", t =>
                        {
                            t.HasComment("Банки");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.BankTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BankStatementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PayerBankBik")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PayerBinInn")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("PayerIik")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PayerKbe")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PayerName")
                        .HasColumnType("text");

                    b.Property<string>("PaymentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PaymentPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RecipientBankBik")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RecipientBinInn")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("RecipientIik")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RecipientKbe")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankStatementId");

                    b.ToTable("BankTransactions");
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.ContractType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_ContractTypes", t =>
                        {
                            t.HasComment("Тип договора");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Идентификатор");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_Countries", t =>
                        {
                            t.HasComment("Страны");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Идентификатор");

                    b.Property<string>("ISO")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasComment("ISO код");

                    b.Property<string>("Symbol")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasComment("Символ");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_Currency", t =>
                        {
                            t.HasComment("Валюты");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.CurrencyRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Идентификатор");

                    b.Property<Guid>("Currency_id")
                        .HasColumnType("uuid")
                        .HasComment("Валюта");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Дата");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric")
                        .HasComment("Курс");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_CurrencyRates", t =>
                        {
                            t.HasComment("Курсы валют");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.MovementType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_MovementTypes", t =>
                        {
                            t.HasComment("Вид движения");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.PPC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Идентификатор");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasComment("Код");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Наименование");

                    b.HasKey("Id");

                    b.ToTable("Payment_C_PPC", t =>
                        {
                            t.HasComment("Код назначения платежа");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Access.Client", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Наименование");

                    b.ToTable("Global_C_Clients");
                });

            modelBuilder.Entity("Torgay.Core.Models.Access.Organization", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<string>("BIN")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("BIN")
                        .HasComment("БИН");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("Is_Deleted")
                        .HasComment("Удалён?");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("Source_Id")
                        .HasComment("Идентификатор источника");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Title")
                        .HasComment("Наименование");

                    b.ToTable("Global_C_Organizations");
                });

            modelBuilder.Entity("Torgay.Core.Models.Access.UserToClient", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.ToTable("Global_C_UserToClient");
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.BankStatement", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("Client_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<decimal>("FinalBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<DateTime>("LastMovementDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Organization_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор организации");

                    b.Property<DateTime>("PeriodFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PeriodTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("Source_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор источника");

                    b.Property<string>("StatementOrganizationBin")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("StatementOrganizationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Payment_D_BankStatement", t =>
                        {
                            t.HasComment("Банковская выписка");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Contract", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<Guid?>("Client_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<Guid>("ContractType_id")
                        .HasColumnType("uuid")
                        .HasComment("Тип договора");

                    b.Property<Guid>("Customer_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор контрагента");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Дата договора");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Дата окончания");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Номер договора");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор организации");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор с 1С");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Дата начала");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasComment("Статус");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Наименование");

                    b.ToTable("Payment_C_Contracts", t =>
                        {
                            t.HasComment("Договора");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Customer", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<string>("BIN")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasComment("БИН");

                    b.Property<Guid?>("Client_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<Guid?>("Country_id")
                        .HasColumnType("uuid")
                        .HasComment("Страна");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<Guid?>("Organization_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор организации");

                    b.Property<Guid?>("Source_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор источника");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Наименование");

                    b.ToTable("Payment_C_Customers", t =>
                        {
                            t.HasComment("Контрагенты");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.CustomerAccount", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<Guid>("AccountType_id")
                        .HasColumnType("uuid")
                        .HasComment("Тип счёта");

                    b.Property<Guid>("Bank_id")
                        .HasColumnType("uuid")
                        .HasComment("Банк");

                    b.Property<Guid?>("Client_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<Guid>("Currency_id")
                        .HasColumnType("uuid")
                        .HasComment("Валюта");

                    b.Property<Guid>("Customer_id")
                        .HasColumnType("uuid")
                        .HasComment("Контрагент");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<Guid?>("Organization_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор организации");

                    b.Property<Guid?>("Source_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор источника");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasComment("Наименование");

                    b.ToTable("Payment_C_CustomerAccounts", t =>
                        {
                            t.HasComment("Счета контрагентов");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Item", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<Guid>("CashFlowCategory_id")
                        .HasColumnType("uuid")
                        .HasComment("Категория ДДС");

                    b.Property<Guid?>("Client_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<Guid>("MovetmentType_id")
                        .HasColumnType("uuid")
                        .HasComment("Вид движения");

                    b.Property<Guid?>("Organization_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор организации");

                    b.Property<Guid>("PnLCategory_id")
                        .HasColumnType("uuid")
                        .HasComment("Категория ОПиУ");

                    b.Property<Guid?>("Source_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор источника");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasComment("Наименование");

                    b.ToTable("Payment_C_Items", t =>
                        {
                            t.HasComment("Статья");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.OrganizationAccount", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<Guid>("AccountType_id")
                        .HasColumnType("uuid")
                        .HasComment("Тип счёта");

                    b.Property<Guid>("Bank_id")
                        .HasColumnType("uuid")
                        .HasComment("Банк");

                    b.Property<Guid?>("Client_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<Guid>("Currency_id")
                        .HasColumnType("uuid")
                        .HasComment("Валюта");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<Guid?>("Organization_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор организации");

                    b.Property<Guid?>("Source_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор источника");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasComment("Наименование");

                    b.ToTable("Payment_C_OrganizationAccounts", t =>
                        {
                            t.HasComment("Счета организации");
                        });
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Payment", b =>
                {
                    b.HasBaseType("Torgay.Core.Models.BaseEntity");

                    b.Property<DateTime>("ActualDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Фактическая дата");

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasComment("Сумма платежа");

                    b.Property<decimal>("AmountInCurrency")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasComment("Сумма платежа в валюте");

                    b.Property<Guid?>("Client_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор клиента");

                    b.Property<Guid?>("Contract_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор договора");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор валюты");

                    b.Property<Guid?>("Customer_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор контрагента получателя/отправителя");

                    b.Property<DateTime?>("IncomeDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Дата поступления");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Удалён?");

                    b.Property<string>("KbkCode")
                        .HasColumnType("text")
                        .HasComment("КБК");

                    b.Property<string>("KnpCode")
                        .HasColumnType("text")
                        .HasComment("КНП");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasComment("Примечание");

                    b.Property<Guid?>("Organization_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор организации");

                    b.Property<Guid?>("ParentPayment_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор родительского платежа");

                    b.Property<Guid?>("PaymentCategory_id")
                        .HasColumnType("uuid")
                        .HasComment("Вид платежа");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Номер");

                    b.Property<DateTime?>("PlannedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Прогнозная дата оплаты");

                    b.Property<string>("PurposeOfPayment")
                        .HasColumnType("text")
                        .HasComment("Назначение платежа");

                    b.Property<Guid?>("RecipientAccount_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор счёта получателя");

                    b.Property<Guid?>("SenderAccountId")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор счёта отправителя");

                    b.Property<Guid?>("Source_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор источника");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasComment("Статус платежа");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasComment("Общая сумма");

                    b.Property<decimal>("TotalAmountInCurrency")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasComment("Общая сумма в валюте");

                    b.Property<Guid?>("TransferPair_id")
                        .HasColumnType("uuid")
                        .HasComment("Идентификатор пары");

                    b.Property<double?>("VatRate")
                        .HasColumnType("double precision")
                        .HasComment("Ставка НДС");

                    b.ToTable("Payment_D_Payments", t =>
                        {
                            t.HasComment("Платежи");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Torgay.Core.Models.Account.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Torgay.Core.Models.Account.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Torgay.Core.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Torgay.Core.Models.Account.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Torgay.Core.Models.Account.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Torgay.Core.Models.Account.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.BankTransaction", b =>
                {
                    b.HasOne("Torgay.Core.Models.Payments.BankStatement", "BankStatement")
                        .WithMany()
                        .HasForeignKey("BankStatementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankStatement");
                });

            modelBuilder.Entity("Torgay.Core.Models.Access.Client", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Access.Client", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Access.Organization", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Access.Organization", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Access.UserToClient", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Access.UserToClient", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.BankStatement", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Payments.BankStatement", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Contract", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Payments.Contract", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Customer", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Payments.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.CustomerAccount", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Payments.CustomerAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Item", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Payments.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.OrganizationAccount", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Payments.OrganizationAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Torgay.Core.Models.Payments.Payment", b =>
                {
                    b.HasOne("Torgay.Core.Models.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("Torgay.Core.Models.Payments.Payment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Torgay.Core.Models.Account.ApplicationRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Torgay.Core.Models.Account.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
